{"version":3,"sources":["components/Contact/ContactsFilter.module.css","App.module.css","components/Form/Form.module.css","components/Section/Section.js","components/Form/Form.js","components/Contact/Contact.js","components/Contact/ContactsFilter.js","App.js","index.js","components/Contact/Contact.module.css","components/Section/Section.module.css"],"names":["module","exports","Section","title","children","className","s","container","Form","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","preventDefault","form","label","type","onChange","pattern","required","input","button","Contact","contacts","onDelete","list","map","id","item","text","onClick","ContactsFilter","App","arrContacts","setContacts","filter","setFilter","visibleContacts","normalizedFilter","toLowerCase","contact","includes","sort","a","b","localeCompare","filterContacts","useEffect","localStorage","setItem","JSON","stringify","shortid","generate","find","alert","contactId","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46702a71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactsFilter_label__2z2G2\",\"input\":\"ContactsFilter_input__1TiBG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__17M3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__15toN\",\"label\":\"Form_label__3EHKq\",\"input\":\"Form_input__fkQ54\",\"button\":\"Form_button__1mWjy\"};","import PropTypes from 'prop-types';\n\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={s.container}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Section;\n","// import { Component } from 'react';\nimport { useState } from 'react';\n\nimport s from './Form.module.css';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const data = { name, number };\n    onSubmit(data);\n\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          label=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          label=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          className={s.input}\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = (e) => {\n//     // const { name, value } = e.target;\n//     this.setState({ [e.target.name]: e.target.value });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             className={s.input}\n//           />\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             className={s.input}\n//           />\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default Form;\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\n\nconst Contact = ({ contacts, onDelete }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <span className={s.text}>{name}:</span>\n          <span className={s.text}>{number}</span>\n\n          <button\n            onClick={() => {\n              onDelete(id);\n            }}\n            type=\"button\"\n            className={s.button}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContact.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport s from './ContactsFilter.module.css';\n\nconst ContactsFilter = ({ value, onChange }) => {\n  return (\n    <label className={s.label}>\n      Filter contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  );\n};\n\nContactsFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ContactsFilter;\n","// import { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport shortid from 'shortid';\n\nimport Section from './components/Section';\nimport Form from './components/Form';\nimport { Contact, ContactsFilter } from './components/Contact';\n\nimport arrContacts from './data/contacts.json';\n\nimport s from './App.module.css';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(arrContacts);\n  const [filter, setFilter] = useState('');\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    contacts.find((contact) => contact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : setContacts([contact, ...contacts]);\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const filterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts\n      .filter((contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  };\n\n  const visibleContacts = filterContacts();\n\n  const removeContact = (contactId) => {\n    setContacts(contacts.filter((contact) => contact.id !== contactId));\n  };\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <>\n      <Section title={'Phonebook'}>\n        <Form onSubmit={addContact} />\n      </Section>\n\n      <Section title={'Contacts'}>\n        <div className={s.container}>\n          <ContactsFilter value={filter} onChange={changeFilter} />\n          <Contact contacts={visibleContacts} onDelete={removeContact} />\n        </div>\n      </Section>\n    </>\n  );\n}\n","import ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport React from 'react';\r\n\r\nReactDom.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__q08pp\",\"text\":\"Contact_text__2U3xQ\",\"button\":\"Contact_button__2t2b-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__38rDr\",\"title\":\"Section_title__3nQ6Z\"};"],"sourceRoot":""}